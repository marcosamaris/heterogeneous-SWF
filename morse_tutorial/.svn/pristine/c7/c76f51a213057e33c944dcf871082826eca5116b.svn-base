Chameleon is a dense linear solver developed in the context ot the MORSE
project, see http://icl.cs.utk.edu/projectsdev/morse/index.html, and
available at https://project.inria.fr/chameleon/.

Chameleon svn repository is available here
https://gforge.inria.fr/scm/?group_id=2884.

This library depends on many other complex components (computational
kernels, advanced runtime systems, MPI, CUDA, etc) making the
configuration and installation of this library painfull.

Spack helps us to automatically build and install all components
required in a coherent way ensuring compatibility of variants and
options.

Here is an overview of the dependency DAG of Chameleon:
#+attr_html: :width 640px
[[file:figures/chameleon_dep2.png]]

* Chameleon package options overview

Use the ~spack info~ command to get some information about the Chameleon
package
#+BEGIN_SRC sh :session spack :exports code :results none
spack info chameleon
#+END_SRC

Pay attention to:
- the versions available, releases or git/svn branches,
- the variants you can build and the default variants chosen

* Chameleon versions available

Releases available are denoted with integers and are considered to be
more stable versions.
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon@0.9.1
#+END_SRC

You can also use the HEAD of one of the svn branches (/e.g./ the trunk).
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon@trunk
#+END_SRC

To use an existing installation of Chameleon in your stack choose the
"exist" version. This option requires to set an environment variable,
CHAMELEON_DIR, pointing to the installation path of your Chameleon
#+BEGIN_SRC sh :session spack :exports code :results none
export CHAMELEON_DIR=/path/to/your/chameleon/installation
spack spec chameleon@exist
#+END_SRC

If you plan to use spack when developing into Chameleon, you can
indicate to spack to build Chameleon in your own source directory, to
be set in CHAMELEON_DIR, containing your modifications
#+BEGIN_SRC sh :session spack :exports code :results none
export CHAMELEON_DIR=/path/to/your/chameleon/sources
spack spec chameleon@src
#+END_SRC

You can also imagine you want to modify some source files of StarPU
and test your modifications through Chameleon
#+BEGIN_SRC sh :session spack :exports code :results none
export STARPU_DIR=/path/to/your/starpu/sources
spack install chameleon@trunk ^starpu@src
#+END_SRC
You can then make new modifications and re-build your StarPU libraries
#+BEGIN_SRC sh :session spack :exports code :results none
spack uninstall -f starpu@src
spack install starpu@src
#+END_SRC
If StarPU is built as shared libraries Chameleon drivers will use the
newly generated libraries. If StarPU libraries are static, it is
required to re-generate Chameleon drivers.
#+BEGIN_SRC sh :session spack :exports code :results none
spack uninstall chameleon@trunk ^starpu@src~shared
spack uninstall starpu@src~shared
spack install chameleon@trunk ^starpu@src~shared
#+END_SRC

* Chameleon as static or dynamic libraries

Chameleon produces dynamic libraries by default because variant
+shared is enabled.
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon # is identical to
spack spec chameleon+shared
#+END_SRC

To build a static version of Chameleon use ~shared
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~shared
#+END_SRC

* Chameleon with or without drivers

Chameleon produces examples (plus testers and timers) by default
because variant +examples is enabled.
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon # is identical to
spack spec chameleon+examples
#+END_SRC

To disable the builling of examples use ~examples
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~examples
#+END_SRC

* Chameleon depends on BLAS, CBLAS, LAPACK, LAPACKE, TMG, MKL

Chameleon depends on dense computational kernels for execution on
conventional CPUs which are BLAS, CBLAS, LAPACK, LAPACKE, TMG.
TMG is available through the LAPACK(E) package.

When you invoke the following spack command
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon
#+END_SRC
you can notice that the default stack requires BLAS, CBLAS, LAPACK,
LAPACKE to be installed.  These libraries are seen in spack as virtual
packages in the sense that several implementations of these interfaces
exist and can be chosen. By default, eigen is chosen for BLAS, and
netlib for the others. Other choices can be made by specifying it
through an spack command. First you can look for the available
/providers/ of a virtual package by using the command ~spack providers~.

#+BEGIN_EXAMPLE
spack providers blas
spack providers cblas
spack providers lapack
spack providers lapacke
#+END_EXAMPLE
The default behaviour follows a lexicographical logic on the package
names. For example, eigen-blas is chosen by default because "e" comes
before the "m" of mkl-blas, the "n" of netlib-blas and the "o" of
openblas.

You can specify the implementation you want to use in your stack with
the ^ character
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~simu ^netlib-lapack ^openblas
#+END_SRC
Pay attention to the ~simu here which is required to specify things
about kernels such as BLAS.  Spack can see the dependency to BLAS here
only if you are specific enough about the variant chosen.  Here the
variant +simu means we will use Chameleon without executing the
kernels so that we do not depend on BLAS, LAPACK etc if +simu is used.
Thus, we need to use ~simu to indicate that we depend on kernels.
This is usefull only if you want to change the default behaviour of
kernels installation.  If you write:
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon ^netlib-blas
#+END_SRC
Spack will tell you Chameleon does not depend on BLAS because it does
not see the implicit ~simu variant.  Thus, use a more specific spec
like this:
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~simu ^netlib-blas
#+END_SRC

When you have troubles with this Spack problem do not hesitate to look
into the packages in order to see under which conditions a variant is
available
#+BEGIN_SRC sh :session spack :exports code :results none
spack edit chameleon
#+END_SRC
Sometimes a variant is available only for some versions for instance.

** How to use the kernels available in the Intel MKL

For proprietary softwares such as the Intel MKL, we do not provide the
installation but we can use them if available in the environment.  For
example if you have an Intel suite installed on your system, make it
available in the environment and our packages in Spack can use it in
the stack.  More precisely we need the environment variable MKLROOT to
be set to use kernels available in the MKL (this is quite
standard). On my labtop for example
#+BEGIN_SRC sh :session spack :exports code :results none
source /home/pruvost/intel/bin/compilervars.sh intel64
source /home/pruvost/intel/mkl/bin/mklvars.sh intel64
#+END_SRC

Then because the MKLROOT is set we can use the MKL kernels
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~simu ^mkl-blas
#+END_SRC

* Chameleon depends on a runtime system

Chameleon depends on either QUARK (http://icl.cs.utk.edu/quark/) or
StarPU (http://starpu.gforge.inria.fr/) runtime system.  ParSEC
(http://icl.cs.utk.edu/parsec/) will also be available in the future.

This dependency to a runtime is exclusive meaning that only one
library should be used, either quark or starpu.  By default StarPU is
used. But a variant exists to switch to quark by specifying +quark
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon+quark
#+END_SRC
Note that chameleon+quark can't make use of CUDA and MPI.

To specify options about StarPU, the runtime used by
default, ~quark should be used:
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~quark ^starpu@1.1.5
#+END_SRC

** Generating execution trace with StarPU+FxT
When Chameleon is executed with StarPU, some execution traces can be
automatically generated if the proper set of options are enabled.

You should use +fxt for Chameleon and StarPU
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~quark+fxt ^starpu+fxt
#+END_SRC

** Simulation mode with StarPU+SimGrid
Chameleon with StarPU has the ability to be simulated using the
SimGrid (http://simgrid.gforge.inria.fr/) simulator.

This implies that the kernels will not be really executed and we do
not depend on their installation anymore.  Nevertheless, having the
performance models of the kernels is a prerequisite.  Please contact
the MORSE team to know more about this feature (send an email to
morse-devel@lists.gforge.inria.fr).

To enable the simulation mode, use +simu for Chameleon and +simgrid
for StarPU
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon~quark+simu ^starpu+simgrid
#+END_SRC

* Chameleon with CUDA/cuBLAS and MAGMA

Chameleon can make use of one or multiple GPUs thanks to StarPU
runtime system and cuBLAS/MAGMA (http://icl.cs.utk.edu/magma/)
kernels.

To use this feature you have to use StarPU runtime specifically.  In
addition you must have an Nvidia CUDA capable GPU and an installation
of CUDA/cuBLAS in your system. You should give to spack your
installation path of cuda by setting the environment variable
CUDA_ROOT (this is quite standard).

To fully benefit from GPU kernels you need to enable +cuda and +magma
variant in chameleon as well as +cuda variant in starpu
#+BEGIN_SRC sh :session spack :exports code :results none
export CUDA_ROOT=/path/to/your/cuda/cublas/installation
spack spec chameleon+cuda+magma ^starpu+cuda
#+END_SRC

If you do not intend to use MAGMA kernels just use +cuda variant
#+BEGIN_SRC sh :session spack :exports code :results none
export CUDA_ROOT=/path/to/your/cuda/cublas/installation
spack spec chameleon+cuda ^starpu+cuda
#+END_SRC

* Chameleon with MPI

Chameleon can be executed on clusters of interconnected nodes using
the MPI library.

To use this feature you have to use StarPU runtime specifically.
To enable MPI just use +mpi for chameleon and starpu
#+BEGIN_SRC sh :session spack :exports code :results none
spack spec chameleon+mpi ^starpu+mpi ^mpich
spack spec chameleon+mpi ^starpu+mpi ^openmpi
#+END_SRC

Notice that we depend on the MPI virtual package here.
To get a list of MPI packages available, try the following:
#+BEGIN_SRC sh :session spack :exports code :results none
spack providers mpi
#+END_SRC

# ** How to use IntelMPI
# For IntelMPI we do not provide the installation but we can use it if
# available in the environment.  For example if you have an Intel suite
# installed on your system, make it available in the environment.
# More precisely set I_MPI_ROOT.  On my labtop for example:
# #+BEGIN_SRC sh :session spack :exports code :results none
# source /home/pruvost/intel/bin/compilervars.sh intel64
# source /home/pruvost/intel/impi/5.0.1.035/bin64/mpivars.sh
# spack spec chameleon+mpi~simu %intel ^mkl-blas ^intelmpi
# #+END_SRC
# Be aware that to use IntelMPI, you should use the intel compiler. This
# can be set with %intel. Remember you should have defined your
# compilers first. Check that it is available
# #+BEGIN_SRC sh :session spack :exports code :results none
# spack compiler list
# #+END_SRC
# If not add it
# #+BEGIN_SRC sh :session spack :exports code :results none
# spack compiler add /path/to/your/intel/compilers
# #+END_SRC
# You can also edit the file ~$HOME/.spack/compilers.yaml~ to add/remove
# compilers or with ~spack config edit compilers~ command.

* Chameleon with MPI and CUDA

Chameleon can also exploit clusters of heterogeneous nodes by the use of
MPI and CUDA.  There is not much to say here, if you have read the
sections about MPI and CUDA you just have to cumulate the options to
get the distributed and heterogeneous stack of chameleon
#+BEGIN_SRC sh :session spack :exports code :results none
export CUDA_ROOT=/path/to/your/cuda/cublas/installation
spack spec chameleon+cuda+magma+mpi ^starpu+cuda+mpi
#+END_SRC

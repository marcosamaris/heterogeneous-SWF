@c -*-texinfo-*-

@c This file is part of the MORSE Handbook.
@c Copyright (C) 2014 Inria
@c Copyright (C) 2014 The University of Tennessee
@c Copyright (C) 2014 King Abdullah University of Science and Technology
@c See the file ../chameleon.texi for copying conditions.

@menu
* Compilation configuration::
* Dependencies detection::
@c * Dependencies compilation::
* Use FxT profiling through StarPU::
* Use simulation mode with StarPU-SimGrid::
@end menu

@c @code{} @option{}
@c @table @code
@c @item truc
@c @item muche
@c @item et zut
@c @c @end table

@node Compilation configuration
@section Compilation configuration

The following arguments can be given to the @command{cmake <path to source 
directory>} script.

In this chapter, the following convention is used:
@itemize @bullet
@item
@option{path} is a path in your filesystem,
@item
@option{var} is a string and the correct value or an example will be given,
@item
@option{trigger} is an CMake option and the correct value is @code{ON} or 
@code{OFF}.
@end itemize

Using CMake there are several ways to give options:
@enumerate
@item directly as CMake command line arguments
@item invoque @command{cmake <path to source directory>} once and then use 
@command{ccmake <path to source directory>} to edit options through a 
minimalist gui (required 
@samp{cmake-curses-gui} installed on a Linux system)
@item invoque @command{cmake-gui} command and fill information about the 
location of the sources and where to build the project, then you have 
access to options through a user-friendly Qt interface (required 
@samp{cmake-qt-gui} installed on a Linux system)
@end enumerate

Example of configuration using the command line 
@example
cmake ~/chameleon/ -DCMAKE_BUILD_TYPE=Debug          \
                   -DCMAKE_INSTALL_PREFIX=~/install  \
                   -DCHAMELEON_USE_CUDA=ON           \
                   -DCHAMELEON_USE_MAGMA=ON          \
                   -DCHAMELEON_USE_MPI=ON            \
                   -DBLA_VENDOR=Intel10_64lp         \
                   -DSTARPU_DIR=~/install/starpu-1.1 \                
                   -DCHAMELEON_USE_FXT=ON 
@end example

You can get the full list of options with @option{-L[A][H]} options of 
@command{cmake} command:
@example
cmake -LH <path to source directory>
@end example

@menu
* General CMake options::
* CHAMELEON options::
@end menu

@node General CMake options
@subsection General CMake options

@table @code

@item -DCMAKE_INSTALL_PREFIX=@option{path} (default:@option{path=/usr/local})
Install directory used by @code{make install} where some headers and libraries 
will be copied.
Permissions have to be granted to write onto @option{path} during @code{make 
install} step.

@item -DCMAKE_BUILD_TYPE=@option{var} (default: @option{Release})
Define the build type and the compiler optimization level.
The possible values for @option{var} are: 
@table @code
@item empty
@item Debug
@item Release
@item RelWithDebInfo
@item MinSizeRel
@end table

@item -DBUILD_SHARED_LIBS=@option{trigger} (default:@option{OFF})
Indicate wether or not CMake has to build CHAMELEON static (@option{OFF}) or 
shared (@option{ON}) libraries.

@end table

@node CHAMELEON options
@subsection CHAMELEON options

List of CHAMELEON options that can be enabled/disabled (value=@code{ON} 
or @code{OFF}):
@table @code

@item @option{-DCHAMELEON_SCHED_STARPU}=@option{trigger} (default: @code{ON})
to link with StarPU library (runtime system)

@item @option{-DCHAMELEON_SCHED_QUARK}=@option{trigger} (default: @code{OFF})
to link with QUARK library (runtime system)

@item @option{-DCHAMELEON_USE_CUDA}=@option{trigger} (default: @code{OFF})
to link with CUDA runtime (implementation paradigm for accelerated codes on 
GPUs) and cuBLAS library (optimized BLAS kernels on GPUs), can only be used with 
StarPU
@item @option{-DCHAMELEON_USE_MAGMA}=@option{trigger} (default: @code{OFF})
to link with MAGMA library (kernels on GPUs, higher level than cuBLAS), can only 
be used with StarPU

@item @option{-DCHAMELEON_USE_MPI}=@option{trigger} (default: @code{OFF})
to link with MPI library (message passing implementation for use of multiple 
nodes with distributed memory), can only be used with StarPU

@item @option{-DCHAMELEON_USE_FXT}=@option{trigger} (default: @code{OFF})
to link with FxT library (trace execution of kernels on workers), can only be 
used with StarPU

@item @option{-DCHAMELEON_SIMULATION=trigger} (default: @code{OFF})
to enable simulation mode, means CHAMELEON will not really execute tasks, 
see details in section @ref{Use simulation mode with StarPU-SimGrid}. 
This option must be used with StarPU compiled with  
@uref{http://simgrid.gforge.inria.fr/, SimGrid} allowing to guess the 
execution time on any architecture.
This feature should be used to make experiments on the scheduler behaviors and 
performances not to produce solutions of linear systems.

@item @option{-DCHAMELEON_ENABLE_DOCS=trigger} (default: @code{ON})
to control build of the documentation contained in @file{docs/} sub-directory
@item @option{-DCHAMELEON_ENABLE_EXAMPLE=trigger} (default: @code{ON})
to control build of the examples executables (API usage) 
contained in @file{example/} sub-directory
@item @option{-DCHAMELEON_ENABLE_TESTING=trigger} (default: @code{ON})
to control build of testing executables (numerical check) contained in 
@file{testing/} sub-directory
@item @option{-DCHAMELEON_ENABLE_TIMING=trigger} (default: @code{ON})
to control build of timing executables (performances check) contained in 
@file{timing/} sub-directory

@item @option{-DCHAMELEON_PREC_S=trigger} (default: @code{ON})
to enable the support of simple arithmetic precision (float in C)
@item @option{-DCHAMELEON_PREC_D=trigger} (default: @code{ON})
to enable the support of double arithmetic precision (double in C)
@item @option{-DCHAMELEON_PREC_C=trigger} (default: @code{ON})
to enable the support of complex arithmetic precision (complex in C)
@item @option{-DCHAMELEON_PREC_Z=trigger} (default: @code{ON})
to enable the support of double complex arithmetic precision (double complex 
in C)

@item @option{-DBLAS_VERBOSE=trigger} (default: @code{OFF})
to make BLAS library discovery verbose
@item @option{-DLAPACK_VERBOSE=trigger} (default: @code{OFF})
to make LAPACK library discovery verbose (automatically enabled if 
@option{BLAS_VERBOSE=@code{ON}})
@end table

List of CHAMELEON options that needs a specific value:
@table @code
@item @option{-DBLA_VENDOR=@option{var}} (default: @option{empty})
The possible values for @option{var} are:
@table @code
@item empty
@item all
@item Intel10_64lp
@item Intel10_64lp_seq
@item ACML
@item Apple
@item Generic
@item ...
@end table
to force CMake to find a specific BLAS library, see the full list of BLA_VENDOR 
in @file{FindBLAS.cmake} in @file{cmake_modules/morse/find}.
By default @option{BLA_VENDOR} is empty so that CMake tries to detect all 
possible BLAS vendor with a preference for Intel MKL.
@end table

List of CHAMELEON options which requires to give a path:
@table @code
@item @option{-DLIBNAME_DIR=@option{path}} (default: empty)
root directory of the LIBNAME library installation
@item @option{-DLIBNAME_INCDIR=@option{path}} (default: empty)
directory of the LIBNAME library headers installation
@item @option{-DLIBNAME_LIBDIR=@option{path}} (default: empty)
directory of the LIBNAME libraries (.so, .a, .dylib, etc) installation
@end table
LIBNAME can be one of the following: BLAS - CBLAS - FXT - HWLOC - 
LAPACK - LAPACKE - MAGMA - QUARK - STARPU - TMG.
See paragraph about @ref{Dependencies detection} for details.

Libraries detected with an official CMake module (see module files in 
@file{CMAKE_ROOT/Modules/}):
@itemize @bullet
@item CUDA
@item MPI
@item Threads
@end itemize

Libraries detected with CHAMELEON cmake modules (see module files in 
@file{cmake_modules/morse/find/} directory of CHAMELEON sources):
@itemize @bullet
@item BLAS
@item CBLAS
@item FXT
@item HWLOC
@item LAPACK
@item LAPACKE
@item MAGMA
@item QUARK
@item STARPU
@item TMG 
@end itemize


@node Dependencies detection
@section Dependencies detection
You have different choices to detect dependencies on your system, either by 
setting some environment variables containing paths to the libs and headers or 
by specifying them directly at cmake configure. 
Different cases :
@enumerate
@item detection of dependencies through environment variables: 
  @itemize @bullet
  @item @env{LD_LIBRARY_PATH} environment variable should contain the list of 
paths 
where to find the libraries:
    @example 
    export @env{LD_LIBRARY_PATH}=$@env{LD_LIBRARY_PATH}:path/to/your/libs
    @end example
  @item @env{INCLUDE} environment variable should contain the list of paths 
where to find the header files of libraries
    @example
    export @env{INCLUDE}=$@env{INCLUDE}:path/to/your/headers
    @end example
  @end itemize

@item detection with user's given paths:
  @itemize @bullet
  @item you can specify the path at cmake configure by invoking 
  @example 
  cmake <path to SOURCE_DIR> -DLIBNAME_DIR=path/to/your/lib 
  @end example
  where LIB stands for the name of the lib to look for, example
  @example
  cmake <path to SOURCE_DIR> -DSTARPU_DIR=path/to/starpudir \
                             -DCBLAS_DIR= ...
  @end example
  @item it is also possible to specify headers and library directories 
separately, example
  @example
  cmake <path to SOURCE_DIR>                           \
  -DSTARPU_INCDIR=path/to/libstarpu/include/starpu/1.1 \
  -DSTARPU_LIBDIR=path/to/libstarpu/lib
  @end example
  @item Note BLAS and LAPACK detection can be tedious so that we provide a 
verbose mode. Use @option{-DBLAS_VERBOSE=ON} or @option{-DLAPACK_VERBOSE=ON} to 
enable it.
  @end itemize
  
@end enumerate


@c @node Dependencies compilation
@c @section Dependencies compilation

@node Use FxT profiling through StarPU
@section Use FxT profiling through StarPU

StarPU can generate its own trace log files by compiling it with the 
@option{--with-fxt} 
option at the configure step (you can have to specify the directory where you 
installed FxT by giving @option{--with-fxt=...} instead of @option{--with-fxt} 
alone). 
By doing so, traces are generated after each execution of a program which uses 
StarPU in the directory pointed by the @env{STARPU_FXT_PREFIX} environment 
variable. Example: 
@example
export @env{STARPU_FXT_PREFIX}=/home/yourname/fxt_files/
@end example

When executing a @command{./timing/...} CHAMELEON program, if it has been 
enabled (StarPU compiled with FxT and @option{-DCHAMELEON_USE_FXT=ON}), you 
can give the option @option{--trace} to tell the program to generate trace log 
files.

Finally, to generate the trace file which can be opened with 
@uref{http://vite.gforge.inria.fr/, Vite} program, you have to use the 
@command{starpu_fxt_tool} executable of StarPU. 
This tool should be in @file{path/to/your/install/starpu/bin}. 
You can use it to generate the trace file like this: 
@itemize @bullet
@item @command{path/to/your/install/starpu/bin/starpu_fxt_tool -i prof_filename}

There is one file per mpi processus (prof_filename_0, prof_filename_1 ...).
To generate a trace of mpi programs you can call it like this:
@item @command{path/to/your/install/starpu/bin/starpu_fxt_tool -i 
prof_filename*}

The trace file will be named paje.trace (use -o option to specify an output 
name).
@end itemize 


@node Use simulation mode with StarPU-SimGrid
@section Use simulation mode with StarPU-SimGrid

Simulation mode can be enabled by setting the cmake option 
@option{-DCHAMELEON_SIMULATION=ON}.
This mode allows you to simulate execution of algorithms with StarPU compiled 
with @uref{http://simgrid.gforge.inria.fr/, SimGrid}.
To do so, we provide some perfmodels in the @file{simucore/perfmodels/} 
directory of CHAMELEON sources.
To use these perfmodels, please set the following
@itemize @bullet
@item @env{STARPU_HOME} environment variable to:
  @example
  @code{<path to SOURCE_DIR>/simucore/perfmodels}
  @end example
@item @env{STARPU_HOSTNAME} environment variable to the name of the machine to 
simulate. For example, on our platform (PlaFRIM) with GPUs at Inria Bordeaux
  @example
  @env{STARPU_HOSTNAME}=mirage
  @end example
Note that only POTRF kernels with block sizes of 320 or 960 (simple and double 
precision) on mirage machine are available for now.
Database of models is subject to change, it should be enrich in a near future.
@end itemize
